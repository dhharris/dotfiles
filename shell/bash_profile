# Set vim mode
set -o vi

# Use tmux by default on local connections
if command -v tmux>/dev/null ; then
    if  [ ! "$SSH_CONNECTION" ]; then
        [[ ! $TERM =~ screen ]] && [ -z "$TMUX" ] && exec tmux -u
    fi
fi

# pyenv init
if command -v pyenv>/dev/null ; then
    eval "$(pyenv init -)"
fi

# Check window size after each command
shopt -s checkwinsize

##### HISTORY SETTINGS #####

# Don't store specific lines
HISTCONTROL=ignoredups:erasedups
HISTIGNORE='pwd:ls:bg:fg:history'
# maximum number of commands that bash can store in memory
# this is used by up/down, ctrl-r
HISTSIZE=500000
# maximum number of commands stored in history file
# determines what can be read by bash on the next session
HISTFILESIZE=-1  # No limit

## Bash History Filestructure ##
# 1) Save every session to a unique file s.t. writes occur after every command
# 2) Write to file after every command.
# 3) On starting a new terminal, beginning from the most recent history file,
#   load all history files from prior sessions into the history buffer until a
#   line count threshold is reached.
HISTFOLDER=$HOME/.bash_histories
mkdir -p $HISTFOLDER
HISTFILEEXT=history      # only files in $HISTFOLDER with this extension will be read

# create unique file name for this session.
HISTFILE=$HISTFOLDER/$(date +%Y-%m-%d_%H-%M-%S_%N).$HISTFILEEXT

# -t lists newest files first
names=($(ls -t $HISTFOLDER/*.$HISTFILEEXT 2>/dev/null))
toload=()
linecount=0
# Check if is really a file and count lines and only append to $toload if linecount under $HISTSIZE
for fname in ${names[*]}; do
    if test -f $fname; then
        linecount=$((linecount+$(wc -l < $fname) ))
        if test $linecount -ge $HISTSIZE; then
            break
        fi
        toload+=($fname)
    fi
done
# Beginning with the oldest, load files in $toload into bash history buffer
for (( i=${#toload[*]}-1; i>=0; i-- )); do
    history -r ${toload[$i]}
done

# Append to history file
shopt -s histappend

# Use one command per line
shopt -s cmdhist

# save history after each command instead after only closing the session
PROMPT_COMMAND="history -a; history -n; $PROMPT_COMMAND"
##### END HISTORY SETTINGS #####

# Allow 256 bits of color
export TERM=xterm-256color

# Restore terminal colors
alias reset_colors='tput sgr0'

# Kill old bash sessions
alias kill_sessions='for i in $(who -u | grep old | cut -f2 -d[ | cut -f1 -d]); do kill $i; done'

# Easy mysql startup
alias mysql='/usr/local/mysql/bin/mysql'

# sshh command for tmux
alias sshh='$HOME/.sshh/sshh'

# Set default editor to vim
export EDITOR=vim

# Configure less
# -X leaves file contents on the screen when less exits (saves to tmux)
# -R enables colors
# -F makes less quit if the entire output can be displayed
export LESS='-XRF'

# Set default C compiler (Clang if available)
command -v clang >/dev/null 2>&1 && export CC=clang

# Change bash PS1 prompt
# See http://bashrcgenerator.com/
export PS1="[\u@\h \W]\$ \[$(tput sgr0)\]"

# Improve ls with colors, etc
export CLICOLOR=1
export LSCOLORS="ExGxBxDxCxEgEdxbxgxcxd"

# Make grep use colors by default
export GREP_OPTIONS='--color=auto'

# Load other configs for MacOS
if [[ "$OSTYPE" == "darwin"* ]] && [ -f ~/dotfiles/shell/bash_profile_macos ]; then
    source ~/dotfiles/shell/bash_profile_macos
fi

if [ -f $HOME/dotfiles/tmux/completion.sh ]; then
    source $HOME/dotfiles/tmux/completion.sh
fi

# Source local bash_profile if present
if [ -f $HOME/bash_profile_local.sh ]; then
    source $HOME/bash_profile_local.sh
fi

# FB Specific Configs
if [ -f ~/bash_profile_fb.sh ]; then
    source ~/bash_profile_fb.sh
fi
#CHEF.NO.SOURCE

# Make vim the default if it is installed
if [ -x "$(command -v vim)" ]; then
    alias vi=vim
fi

# PATH Updates
export PATH="/usr/local/opt/llvm/bin:$PATH"
export PATH="/usr/local/sbin:/usr/local/bin:$PATH"
export PATH="$HOME/Library/Python/3.7/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/scripts:$PATH"

# cowspeak "art"
export COWPATH="/usr/share/cowsay"

# Configure pyenv - placed near end since it also manipulates PATH
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

####################
# Helper functions
####################

# Get confirmation from the user before executing a command
# Can be used like `confirm && echo "confirmed"`
confirm() {
    local prompt="$1"
    read -r -p "${prompt:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

# Takes a path argument and returns it as an absolute path.
# No-op if the path is already absolute.
to_abs_path() {
    local target="$1"

    if [ "$target" == "." ]; then
        echo "$(pwd)"
    elif [ "$target" == ".." ]; then
        echo "$(dirname "$(pwd)")"
    else
        echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
    fi
}
